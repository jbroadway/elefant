#!/usr/bin/env php
<?php

/**
 * Elefant CMS - http://www.elefantcms.com/
 *
 * Copyright (c) 2011 Johnny Broadway
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/**
 * This is the Elefant command line utility. It can run the Elefant
 * install routines, create the scaffolding for new apps or the index
 * for new translation files, or encrypt a password for you.
 *
 * Usage:
 *
 *     $ cd /path/to/my/site
 *     $ elefant COMMAND
 */

ini_set ('error_reporting', 247);

$help = <<<HELP

== Elefant framework command line utility ==

Usage:

  $ cd /path/to/my/site
  $ elefant COMMAND

Commands:

  install                          Run the command line installer
  backup <path>                    Save a backup of the site and db
  export-db <file>                 Export the db to a file or STDOUT
  import-db <file>                 Import a schema file into the db
  build-app <appname>              Build the scaffolding for an app
  crud-app <modelname> <fieldlist> Build the scaffolding for a CRUD app
  generate-password <length(8)>    Generate a random password
  encrypt-password <password>      Encrypt a password for the db
  version                          Output the Elefant version number


HELP;

if (! @file_exists ('conf/config.php')) {
	echo "** Error: Must be run from the root of an Elefant website.\n";
	die;
}

/**
 * Takes a plain text password and return the encrypted version.
 */
function encrypt_password ($plain) {
	$base = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
	$salt = '$2a$07$';
	for ($i = 0; $i < 22; $i++) {
		$salt .= $base[rand (0, 61)];
	}
	return crypt ($plain, $salt . '$');
}

/**
 * Takes a length and returns a random string of characters of that
 * length for use in passwords. String may contain any number, lower
 * or uppercase letters, or common symbols.
 */
function generate_password ($length) {
	$list = '123467890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_-+=~:;|<>[]{}?"\'';
	$pass = '';
	while (strlen ($pass) < $length) {
		$pass .= substr ($list, mt_rand (0, strlen ($list)), 1);
	}
	return $pass;
}

if (count ($argv) > 1) {
	switch ($argv[1]) {



		/**
		 * This is the command line install routine.
		 * Its job is to create the database schema
		 * based on the settings in conf/config.php,
		 * and to create an initial admin user account.
		 * It will output the password generated for
		 * that account at the end, and mark itself
		 * as done so as to prevent it or the web
		 * installer from being run a second time.
		 */
		case 'install':
			if (@file_exists ('conf/installed')) {
				echo "** Error: Installer has already been run.\n";
				die;
			}
			
			require_once ('lib/Functions.php');
			require_once ('lib/Form.php');
			require_once ('lib/DB.php');
			require_once ('lib/Model.php');
			require_once ('lib/ExtendedModel.php');
			require_once ('apps/admin/models/Webpage.php');
			require_once ('apps/admin/models/Versions.php');
			require_once ('apps/user/models/User.php');
			require_once ('apps/blocks/models/Block.php');
			
			$conf = parse_ini_file ('conf/config.php', true);
			date_default_timezone_set ($conf['General']['timezone']);
			
			// set the necessary folder permissions
			system ('chmod -R 777 cache conf css files lang layouts');
			system ('chmod 777 apps');
			
			// connect to the database
			$connected = false;
			foreach (array_keys ($conf['Database']) as $key) {
				if ($key == 'master') {
					$conf['Database'][$key]['master'] = true;
					if (! DB::open ($conf['Database'][$key])) {
						echo "** Error: Could not connect to the database. Please check the\n";
						echo "          settings in conf/config.php and try again.\n";
						echo "\n";
						echo "          " . DB::error () . "\n";
						die;
					}
					$connected = true;
					break;
				}
			}
			if (! $connected) {
				echo "** Error: Could not find a master database. Please check the\n";
				echo "          settings in conf/config.php and try again.\n";
				die;
			}
			
			// import the database schema
			$sqldata = sql_split (file_get_contents ('conf/install_' . $conf['Database']['master']['driver'] . '.sql'));
			
			foreach ($sqldata as $sql) {
				if (! DB::execute ($sql)) {
					echo '** Error: ' . DB::error () . "\n";
					DB::execute ('rollback');
				}
			}
			
			// change the admin user's password
			$pass = generate_password (8);
			$date = gmdate ('Y-m-d H:i:s');
			if (! DB::execute (
				"update `user` set `email` = ?, `password` = ? where `id` = 1",
				$conf['General']['email_from'],
				encrypt_password ($pass)
			)) {
				echo 'Error: ' . DB::error () . "\n";
			}
			
			// respond with the root password
			echo "Database created. Your initial admin account is:\n";
			echo 'Username: ' . $conf['General']['email_from'] . "\n";
			echo 'Password: ' . $pass . "\n";
			
			// create versions entries for initial content
			$wp = new Webpage ('index');
			Versions::add ($wp);
			$b = new Block ('members');
			Versions::add ($b);
			
			// disable the installer
			@umask (0000);
			@touch ('conf/installed');
			echo "Done.\n";
			break;



		/**
		 * This command builds the scaffolding for a new
		 * app in the apps folder. This includes the basic
		 * directory structure as well as some sample
		 * files (config, handlers, views).
		 */
		case 'build-app':
			if (! isset ($argv[2])) {
				echo "Usage: elefant build-app <appname>\n";
				die;
			}

			mkdir ('apps/' . $argv[2] . '/conf', 0755, true);
			mkdir ('apps/' . $argv[2] . '/forms', 0755, true);
			mkdir ('apps/' . $argv[2] . '/handlers', 0755, true);
			mkdir ('apps/' . $argv[2] . '/lib', 0755, true);
			mkdir ('apps/' . $argv[2] . '/models', 0755, true);
			mkdir ('apps/' . $argv[2] . '/views', 0755, true);
			
			file_put_contents ('apps/' . $argv[2] . '/handlers/index.php', sprintf (
				"<?php\n\n\$page->title = '%s home';\necho \$tpl->render ('%s/index', array ());\n\n?>",
				ucfirst ($argv[2]),
				$argv[2]
			));
			file_put_contents ('apps/' . $argv[2] . '/handlers/admin.php', sprintf (
				"<?php\n\n\$this->require_admin ();\n\n\$page->layout = 'admin';\n\$page->title = '%s admin';\n\n?>",
				ucfirst ($argv[2])
			));
			file_put_contents ('apps/' . $argv[2] . '/views/index.html', '<p>{{ body|none }}</p>');
			file_put_contents ('apps/' . $argv[2] . '/conf/config.php', sprintf (
				"; <?php /*\n\n[Admin]\n\nhandler = %s/admin\nname = %s\n\n; */ ?>",
				$argv[2],
				ucfirst ($argv[2])
			));
			
			printf ("App created in apps/%s/\n", $argv[2]);
			break;



		/**
		 * This command builds the CRUD outline for a new
		 * app in the apps folder. This includes the basic
		 * directory structure as well as a model definition,
		 * database schema files, and basic admin handlers
		 * for Create, Read, Update, and Delete functions.
		 */
		case 'crud-app':
			if (! isset ($argv[2])) {
				echo "Usage: elefant crud-app <modelname> <fieldlist>\n";
				die;
			}

			if (! isset ($argv[3])) {
				echo "Usage: elefant crud-app <modelname <fieldlist>\n";
				die;
			}

			$name = strtolower ($argv[2]);

			// get plural name
			require_once ('lib/vendor/ActiveResource.php');
			$ar = new ActiveResource;
			$plural = $ar->pluralize ($name);
			unset ($ar);

			// build list of fields
			$fields = array ();
			if ($argv[3] !== 'id') {
				$fields[] = 'id';
			}
			for ($i = 3; $i < count ($argv); $i++) {
				$fields[] = $argv[$i];
			}

			mkdir ('apps/' . $plural . '/conf', 0755, true);
			mkdir ('apps/' . $plural . '/forms', 0755, true);
			mkdir ('apps/' . $plural . '/handlers', 0755, true);
			mkdir ('apps/' . $plural . '/lib', 0755, true);
			mkdir ('apps/' . $plural . '/models', 0755, true);
			mkdir ('apps/' . $plural . '/views', 0755, true);
			
			/**
			 * Make a row for the MySQL schema.
			 */
			function mysql_column_row ($field) {
				if ($field === 'id') {
					return "\tid int not null auto_increment primary key";
				}
				return "\t$field char(48) not null";
			}
			
			/**
			 * Make a row for the SQLite schema.
			 */
			function sqlite_column_row ($field) {
				if ($field === 'id') {
					return "\tid integer primary key";
				}
				return "\t$field char(48) not null";
			}
			
			/**
			 * Make a row for the PostgreSQL schema.
			 */
			function pgsql_column_row ($field) {
				if ($field === 'id') {
					return "\tid integer not null default nextval('TABLE_id_seq') primary key";
				}
				return "\t$field char(48) not null";
			}
			
			/**
			 * Make the validation rules for the form validators.
			 */
			function validate_field ($field) {
				if ($field === 'id') {
					return '';
				}
				return "[$field]\nnot empty = 1";
			}
			
			/**
			 * Make the assignments for the add handler.
			 */
			function add_post_field ($field) {
				return "'$field' => \$_POST['$field']";
			}
			
			/**
			 * Make the assignments for the edit handler.
			 */
			function edit_post_fields ($fields, $name) {
				$out = '';
				foreach ($fields as $field) {
					$out .= sprintf (
						"\t\$%s->%s = \$_POST['%s'];\n",
						$name,
						$field,
						$field
					);
				}
				return $out;
			}

			/**
			 * Make a field's form input for the add/edit views.
			 */
			function generate_field ($field) {
				return sprintf (
					"<p>\n\t{\"%s\"}:<br />\n\t<input type=\"text\" name=\"%s\" value=\"{{ %s|quotes }}\" />\n\t<span class=\"notice\" id=\"%s-notice\">{\"Please enter a %s.\"}</span>\n</p>",
					ucfirst ($field),
					$field,
					$field,
					$field,
					$field
				);
			}
			
			/**
			 * Make the field headers for the admin view.
			 */
			function make_fields_header ($fields) {
				$out = '';
				$limit = count ($fields) > 3 ? 3 : count ($fields);
				if ($limit === 1) {
					$width = 84;
				} elseif ($limit === 2) {
					$width = 42;
				} else {
					$width = 28;
				}
				for ($i = 0; $i < $limit; $i++) {
					$out .= sprintf (
						"\t\t<th width=\"%d%%\">{\" %s \"}</th>\n",
						$width,
						ucfirst ($fields[$i])
					);
				}
				return $out;
			}
			
			/**
			 * Make the field rows for the admin view.
			 */
			function make_fields_row ($fields) {
				$out = '';
				$limit = count ($fields) > 3 ? 3 : count ($fields);
				for ($i = 0; $i < $limit; $i++) {
					$out .= sprintf (
						"\t\t<td>{{ loop_value->%s }}</td>\n",
						$fields[$i]
					);
				}
				return $out;
			}
			
			file_put_contents ('apps/' . $plural . '/conf/config.php', sprintf (
				"; <?php\n\n[Admin]\n\nhandler = %s/admin\nname = %s\n\n; */ ?>",
				$plural,
				ucfirst ($plural)
			));
			file_put_contents ('apps/' . $plural . '/conf/install_mysql.sql', sprintf (
				"create table %s (\n%s\n);",
				$plural,
				join (",\n", array_map ('mysql_column_row', $fields))
			));
			file_put_contents ('apps/' . $plural . '/conf/install_sqlite.sql', sprintf (
				"create table %s (\n%s\n);",
				$plural,
				join (",\n", array_map ('sqlite_column_row', $fields))
			));
			file_put_contents ('apps/' . $plural . '/conf/install_pgsql.sql', sprintf (
				"create sequence %s_id_seq;\n\ncreate table %s (\n%s\n);",
				$plural,
				$plural,
				str_replace ('TABLE', $plural, join (",\n", array_map ('pgsql_column_row', $fields)))
			));
			file_put_contents ('apps/' . $plural . '/forms/add.php', sprintf (
				"; <?php /*%s\n\n; */ ?>",
				join ("\n\n", array_map ('validate_field', $fields))
			));
			file_put_contents ('apps/' . $plural . '/forms/edit.php', sprintf (
				"; <?php /*%s\n\n; */ ?>",
				join ("\n\n", array_map ('validate_field', $fields))
			));
			file_put_contents ('apps/' . $plural . '/models/' . ucfirst ($name) . '.php', sprintf (
				"<?php\n\nnamespace %s;\n\nclass %s extends \\Model {\n\tpublic \$table = '%s';\n}\n\n?>",
				$plural,
				ucfirst ($name),
				$plural
			));
			file_put_contents ('apps/' . $plural . '/handlers/admin.php', sprintf (
				"<?php\n\n\$this->require_admin ();\n\n\$page->layout = 'admin';\n\$page->title = i18n_get ('%s');\n\n// Calculate the offset\n\$limit = 20;\n\$num = isset (\$this->params[0]) ? \$this->params[0] : 1;\n\$offset = (\$num - 1) * \$limit;\n\n// Fetch the items and total items\n\$items = %s\%s::query ()->fetch (\$limit, \$offset);\n\$total = %s\%s::query ()->count ();\n\n// Pass our data to the view template\necho \$tpl->render (\n\t'%s/admin',\n\tarray (\n\t\t'limit' => \$limit,\n\t\t'total' => \$total,\n\t\t'items' => \$items,\n\t\t'count' => count (\$items),\n\t\t'url' => '/%s/admin/%%d'\n\t)\n);\n\n?>",
				ucfirst ($plural),
				$plural,
				ucfirst ($name),
				$plural,
				ucfirst ($name),
				$plural,
				$plural
			));
			file_put_contents ('apps/' . $plural . '/handlers/index.php', sprintf (
				"<?php\n\n\$page->title = '%s home';\necho \$tpl->render ('%s/index', array ());\n\n?>",
				ucfirst ($plural),
				$plural
			));
			file_put_contents ('apps/' . $plural . '/handlers/add.php', sprintf (
				"<?php\n\n\$this->require_admin ();\n\n\$page->layout = 'admin';\n\$page->title = i18n_get ('Add %s');\n\n\$form = new Form ('post', \$this);\n\necho \$form->handle (function (\$form) {\n\t// Create and save a new %s\n\t\$%s = new %s\%s (array (\n\t\t%s\n\t));\n\t\$%s->put ();\n\n\tif (\$%s->error) {\n\t\t// Failed to save\n\t\t\$form->controller->add_notification (i18n_get ('Unable to save %s.'));\n\t\treturn false;\n\t}\n\n\t// Save a version of the contact\n\tVersions::add (\$%s);\n\n\t// Notify the user and redirect on success\n\t\$form->controller->add_notification (i18n_get ('%s added.'));\n\t\$form->controller->redirect ('/%s/admin');\n});\n\n?>",
				ucfirst ($name),
				$name,
				$name,
				$plural,
				ucfirst ($name),
				join (",\n\t\t", array_map ('add_post_field', array_slice ($fields, 1))),
				$name,
				$name,
				$name,
				$name,
				ucfirst ($name),
				$plural
			));
			file_put_contents ('apps/' . $plural . '/handlers/edit.php', sprintf (
				"<?php\n\n\$this->require_admin ();\n\n\$page->layout = 'admin';\n\$page->title = i18n_get ('Edit %s');\n\n\$form = new Form ('post', \$this);\n\n\$form->data = new %s\%s (\$_GET['id']);\n\necho \$form->handle (function (\$form) {\n\t// Update the %s\n\t\$%s = \$form->data;\n%s\t\$%s->put ();\n\n\tif (\$%s->error) {\n\t\t// Failed to save\n\t\t\$form->controller->add_notification (i18n_get ('Unable to save %s.'));\n\t\treturn false;\n\t}\n\n\t// Save a version of the %s\n\tVersions::add (\$%s);\n\n\t// Notify the user and redirect on success\n\t\$form->controller->add_notification (i18n_get ('%s saved.'));\n\t\$form->controller->redirect ('/%s/admin');\n});\n\n?>",
				ucfirst ($name),
				$plural,
				ucfirst ($name),
				$name,
				$name,
				edit_post_fields (array_slice ($fields, 1), $name),
				$name,
				$name,
				$name,
				$name,
				$name,
				ucfirst ($name),
				$plural
			));
			file_put_contents ('apps/' . $plural . '/handlers/delete.php', sprintf (
				"<?php\n\n\$this->require_admin ();\n\n\$%s = new %s\%s;\n\$%s->remove (\$_GET['id']);\n\nif (\$%s->error) {\n\t\$this->add_notification (i18n_get ('Unable to delete %s.'));\n\t\$this->redirect ('/%s/admin');\n}\n\n\$this->add_notification (i18n_get ('%s deleted.'));\n\$this->redirect ('/%s/admin');\n\n?>",
				$name,
				$plural,
				ucfirst ($name),
				$name,
				$name,
				$name,
				$plural,
				ucfirst ($name),
				$plural
			));
			file_put_contents ('apps/' . $plural . '/views/index.html', '<p>{{ body|none }}</p>');
			file_put_contents ('apps/' . $plural . '/views/add.html', sprintf (
				"<form method=\"post\" id=\"{{ _form }}\">\n\n%s\n\n<p><input type=\"submit\" value=\"{\"Add %s\"}\" /></p>\n\n</form>",
				join ("\n\n", array_map ('generate_field', array_slice ($fields, 1))),
				ucfirst ($name)
			));
			file_put_contents ('apps/' . $plural . '/views/edit.html', sprintf (
				"<form method=\"post\" id=\"{{ _form }}\">\n\n%s\n\n<p><input type=\"submit\" value=\"{\"Save %s\"}\" /></p>\n\n</form>",
				join ("\n\n", array_map ('generate_field', array_slice ($fields, 1))),
				ucfirst ($name)
			));
			file_put_contents ('apps/' . $plural . '/views/admin.html', sprintf (
				"<p><a href=\"/%s/add\">{\"Add %s\"}</a></p>\n\n<p>\n<table width=\"100%%\">\n\t<tr>\n%s\t\t<th width=\"16%%\">&nbsp;</th>\n\t</tr>\n{%% foreach items %%}\n\t<tr>\n%s\t\t<td>\n\t\t\t<a\thref=\"/%s/edit?id={{ loop_value->id }}\">{\"Edit\"}</a> |\n\t\t\t<a\thref=\"/%s/delete?id={{ loop_value->id }}\"\n\t\t\t\tonclick=\"return confirm ('{\"Are you sure you want to delete this %s?\"}')\">{\"Delete\"}</a>\n\t\t</td>\n\t</tr>\n{%% end %%}\n</table>\n</p>\n\n{! navigation/pager?style=text&url=[url]&total=[total]&count=[count]&limit=[limit] !}",
				$plural,
				ucfirst ($name),
				make_fields_header (array_slice ($fields, 1)),
				make_fields_row (array_slice ($fields, 1)),
				$plural,
				$plural,
				$name
			));
			
			printf ("App created in apps/%s/\n", $plural);
			break;



		/**
		 * This command exports a backup of the database into
		 * the specified file using the database's associated
		 * command line export utility. Note that the utility
		 * must be in your path for this to work.
		 */
		case 'export-db':
			$conf = parse_ini_file ('conf/config.php', true);
			switch ($conf['Database']['master']['driver']) {
				case 'sqlite':
					if (isset ($argv[2])) {
						exec ('sqlite3 ' . $conf['Database']['master']['file'] . ' .dump > ' . $argv[2]);
					} else {
						passthru ('sqlite3 ' . $conf['Database']['master']['file'] . ' .dump');
					}
					break;

				case 'mysql':
					// get port number
					list ($host, $port) = (strpos ($conf['Database']['master']['host'], ':') !== false)
						? explode (':', $conf['Database']['master']['host'])
						: array ($conf['Database']['master']['host'], 3306);

					if (isset ($argv[2])) {
						exec (sprintf (
							'mysqldump --password=%s -u %s -h %s -P %d %s > %s',
							 escapeshellcmd ($conf['Database']['master']['pass']),
							 $conf['Database']['master']['user'],
							 $host,
							 $port,
							 $conf['Database']['master']['name'],
							 $argv[2]
						));
					} else {
						passthru (sprintf (
							'mysqldump --password=%s -u %s -h %s -P %d %s',
							 escapeshellcmd ($conf['Database']['master']['pass']),
							 $conf['Database']['master']['user'],
							 $host,
							 $port,
							 $conf['Database']['master']['name']
						));
					}
					break;

				case 'pgsql':
					// get port number
					list ($host, $port) = (strpos ($conf['Database']['master']['host'], ':') !== false)
						? explode (':', $conf['Database']['master']['host'])
						: array ($conf['Database']['master']['host'], 3306);

					file_put_contents ('conf/.pgpass', sprintf (
						'%s:%d:%s:%s:%s',
						$host,
						$port,
						$conf['Database']['master']['name'],
						$conf['Database']['master']['user'],
						$conf['Database']['master']['pass']
					));
					chmod ('conf/.pgpass', 0600);
					if (isset ($argv[2])) {
						exec (sprintf (
							'export PGPASSFILE=conf/.pgpass; pg_dump -U %s -h %s -p %d %s > %s; export PGPASSFILE=~/.pgpass',
							 $conf['Database']['master']['user'],
							 $host,
							 $port,
							 $conf['Database']['master']['name'],
							 $argv[2]
						));
					} else {
						passthru (sprintf (
							'export PGPASSFILE=conf/.pgpass; pg_dump -U %s -h %s -p %d %s; export PGPASSFILE=~/.pgpass',
							 $conf['Database']['master']['user'],
							 $host,
							 $port,
							 $conf['Database']['master']['name']
						));
					}
					unlink ('conf/.pgpass');
					break;

				default:
					echo "** Error: Unable to determine database driver from site config.\n";
					die;
					break;
			}
			break;



		/**
		 * This command imports a schema file into the database.
		 */
		case 'import-db':
			if (! isset ($argv[2])) {
				echo "Usage: elefant import-db <file>\n";
				die;
			}

			$file = $argv[2];
			if (! file_exists ($file)) {
				echo "** Error: File not found: $file\n";
				die;
			}

			require_once ('lib/Functions.php');
			require_once ('lib/DB.php');
			
			$conf = parse_ini_file ('conf/config.php', true);
			date_default_timezone_set ($conf['General']['timezone']);// connect to the database

			$connected = false;
			foreach (array_keys ($conf['Database']) as $key) {
				if ($key == 'master') {
					$conf['Database'][$key]['master'] = true;
					if (! DB::open ($conf['Database'][$key])) {
						echo "** Error: Could not connect to the database. Please check the\n";
						echo "          settings in conf/config.php and try again.\n";
						echo "\n";
						echo "          " . DB::error () . "\n";
						die;
					}
					$connected = true;
					break;
				}
			}
			if (! $connected) {
				echo "** Error: Could not find a master database. Please check the\n";
				echo "          settings in conf/config.php and try again.\n";
				die;
			}
			
			// import the database schema
			$sqldata = sql_split (file_get_contents ($file));
			
			DB::execute ('begin');
			foreach ($sqldata as $sql) {
				if (! DB::execute ($sql)) {
					echo '** Error: ' . DB::error () . "\n";
					DB::execute ('rollback');
					die;
				}
			}
			DB::execute ('commit');
			echo count ($sqldata) . " commands executed.\n";
			break;



		/**
		 * Create a backup of the site and database as a tarball
		 * and move it to the specified folder.
		 */
		case 'backup':
			if (! isset ($argv[2])) {
				echo "Usage: elefant backup <path>\n";
				die;
			}
			if (! @is_dir ($argv[2])) {
				echo "** Error: Specified path is not a folder.\n";
				die;
			}
			if (! @is_writeable ($argv[2])) {
				echo "** Error: Specified folder is not writeable.\n";
				die;
			}

			// add trailing slash
			$path = (preg_match ('/\/$/', $argv[2])) ? $argv[2] : $argv[2] . '/';

			date_default_timezone_set ('GMT');
			$ts = gmdate ('Y-m-d-H-i-s');

			if (! @is_dir ('.backups')) {
				mkdir ('.backups');
				file_put_contents ('.backups/.htaccess', "Order allow,deny\nDeny from all\n");
			}
			mkdir ('.backups/backup-' . $ts);
			exec ('./conf/elefant export-db .backups/backup-' . $ts . '/dump.sql');
			copy ('.htaccess', '.backups/backup-' . $ts . '/.htaccess');
			exec ('cp -R * .backups/backup-' . $ts . '/');
			chdir ('.backups');
			exec ('tar -cf backup-' . $ts . '.tar backup-' . $ts);
			exec ('gzip backup-' . $ts . '.tar');
			chdir ('..');
			exec ('mv .backups/backup-' . $ts . '.tar.gz ' . $path);
			exec ('rm -Rf .backups/backup-' . $ts);
			break;



		/**
		 * Encrypts the specified password in a compatible format
		 * for storage in the Elefant user table.
		 */
		case 'encrypt-password':
			if (! isset ($argv[2])) {
				echo "Usage: elefant encrypt-password <password>\n";
				die;
			}
			echo encrypt_password ($argv[2]) . "\n";
			break;



		/**
		 * Generates a random password of the specified length
		 * (default is 8 characters), using random lower- and
		 * upper-case letters, numbers, and symbols.
		 */
		case 'generate-password':
			if (isset ($argv[2])) {
				if (! is_numeric ($argv[2])) {
					echo "Usage: elefant generate-password <length|8>\n";
					die;
				}
				$length = $argv[2];
			} else {
				$length = 8;
			}
			echo generate_password ($length) . "\n";
			break;



		/**
		 * Output the Elefant version number.
		 */
		case 'version':
			require_once ('conf/version.php');
			echo ELEFANT_VERSION . "\n";
			break;



		/**
		 * Unknown command error handler.
		 */
		default:
			echo "** Error: Unknown option: ${argv[1]}\n";
			die;
			break;
	}

} else {
	echo $help;
}

?>
